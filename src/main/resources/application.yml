application:
  title: "springboot-demo"
  formatted-version: "1.0"
server:
  address: 0.0.0.0
  port: 8081
  servlet:
    #uri公共前缀
    contextPath: "/api"
    session:
      timeout: 10

spring:
  #日志记录模式
  profiles:
    active: dev
  banner:
    charset: "UTF-8"
    location: classpath:/banner.txt
  datasource:
    url: jdbc:mysql://192.168.205.36:3306/cloudasc
    username: root
    password: hss
    driver-class-name: com.mysql.cj.jdbc.Driver
  kafka:
    bootstrap-servers: 172.101.203.33:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 0
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false

  rabbitmq:
    host: 172.101.203.33
    port: 5672
    username: admin
    password: admin
  redis:
    #url: redis://user:password@example.com:6379
    #redis机器ip
    host: 127.0.0.1
    #redis端口
    port: 6379
    #redis密码
    password:
    #redis超时时间（毫秒），如果不设置，取默认值2000
    timeout: 10000
    jedis:
      pool:
        #最大空闲数
        maxIdle: 300
        #连接池的最大数据库连接数。设为0表示无限制,如果是jedis 2.4以后用redis.maxTotal
        maxActive: 600
        #控制一个pool可分配多少个jedis实例,用来替换上面的redis.maxActive,如果是jedis 2.4以后用该属性
        #maxTotal: 1000
        #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
        maxWait: 1000
        #连接的最小空闲时间 默认1800000毫秒(30分钟)
        #minEvictableIdleTimeMillis: 300000
        #每次释放连接的最大数目,默认3
        #numTestsPerEvictionRun: 1024
        #逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
        timeBetweenEvictionRuns: 30000
        #是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个
        #testOnBorrow: true
        #在空闲时检查有效性, 默认false
        #testWhileIdle: true

mybatis:
  configuration:
    cache-enabled: false
    map-underscore-to-camel-case: true
    use-generated-keys: true
    default-executor-type: reuse
    default-statement-timeout: 600

# Logging settings.
logging:
  config: classpath:logback-spring.xml